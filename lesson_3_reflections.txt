# When would you want to use a remote repository rather than keeping all your work local?

When working on a team it is better to have an online repository to keep everything
centralized and accessible. Sometimes you might need to use different work stations and
a remote repository is more practical.


# Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Your local repository might not be ready for release to the public. It's better to do this manually
and control all releases to the public. You can keep the releases logical too.


# Describe the differences between forks, clones, and branches. When would you use one instead of another?

Fork - it is a clone that is located on Github's servers. It keeps track of who you forked it from.
Clone - A copy of another repository.
Branch - A separate production of a code at a certain point in time.


# What is the benefit of having a copy of the last known state of the remote stored locally?

It can be used and worked on without internet access.


# How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Without GitHub I would have to collaborate over email or face to face.
It would be much harder to stay organized and avoid conflicts.
There would have to be very strict procedures and workflows. It would not be efficient.


# When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

Separate branches are useful for using in a development environment. The master branch needs to be in production
mode and it cannot be broken while testing new features.
The problem is that sometimes separate branches can develope independently and lead to conflicts if the same code is changed
from one branch to the master.
